<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Checkout</title>
    <script src="https://js.stripe.com/v3/"></script>
    <script src="https://cdn.jsdelivr.net/npm/@alma/widgets@3.x.x/dist/widgets.umd.js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@alma/widgets@3.x.x/dist/widgets.min.css"
    />
    <style>
      #paymentIntentJson,
      #paymentIntentNextActionJson {
        word-break: break-word;
      }
    </style>
  </head>
  <body>
    <div id="alma-widget"></div>
    <button id="checkout">Alma Checkout</button>
    <div>
      <h5>paymentIntent json</h5>
      <div id="secretJson"></div>
    </div>
    <div>
      <h5>paymentIntent next_action json</h5>
      <div id="secretNextActionJson"></div>
    </div>
    <script>
      let client_secret = "";
      var stripe = Stripe("<%= $publicKey %>", {
        locale: "en",
      });
      // Set your publishable key. Remember to change this to your live publishable key in production!
      // See your keys here: https://dashboard.stripe.com/apikeys
      let secret = "";
      (async () => {
        const response = await fetch("/Alma/secret");
        const res = await response.json();
        console.log(res);
        secret = res;
        document.getElementById("secretJson").innerText =
          JSON.stringify(secret);
        document.getElementById("secretNextActionJson").innerText =
          JSON.stringify(secret?.intent?.next_action);

        // Render the form using the clientSecret
      })();
      document
        .getElementById("checkout")
        .addEventListener("click", async (e) => {
          // Set the clientSecret of the PaymentIntent
          // const { error } = await stripe.confirmPayment({
          //   clientSecret: secret?.client_secret || "",
          //   confirmParams: {
          //     payment_method_data: {
          //       type: "alma",
          //     },
          //     // Return URL where the customer should be redirected after the authorization
          //     return_url: `${window.location.href}`,
          //   },
          // });

          // if (error) {
          //   // Inform the customer that there was an error.
          //   const errorElement = document.getElementById("error-message");
          //   errorElement.textContent = result.error.message;
          // }
          window.location.href =
            secret?.intent?.next_action?.redirect_to_url?.url;
        });

      setTimeout(() => {
        var widgets = Alma.Widgets.initialize(
          "merchant_120SGb45JzxtFQb9iuvXUNkRBZYUB5G8eS", // ID marchand
          Alma.ApiMode.TEST // mode de l'API (LIVE ou TEST)
        );
        widgets.add(Alma.Widgets.PaymentPlans, {
          container: "#alma-widget",
          purchaseAmount: 12000,
          locale: "fr",
          hideIfNotEligible: false,
          transitionDelay: 5500,
          monochrome: true,
          hideBorder: true,
          plans: [
            {
              installmentsCount: 3,
              minAmount: 8000,
              maxAmount: 200000,
            },
            {
              installmentsCount: 4,
              minAmount: 15000,
              maxAmount: 200000,
            },
          ],
        });
      }, 5000);
    </script>
  </body>
</html>
